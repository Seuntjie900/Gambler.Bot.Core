trigger:
- master

name: 1.0.$(Build.BuildId)

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

stages:
- stage: Build
  jobs:
  - job: BuildJob
    steps:
    - task: DownloadSecureFile@1
      name: diceAccountsFile
      inputs:
        secureFile: 'diceaccounts.json'

    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $env:DICETESTACCOUNTS = "$(diceAccountsFile.secureFilePath)"
          Write-Host "DICETESTACCOUNTS environment variable is set to $env:DICETESTACCOUNTS"
      env:
        diceAccountsFile.secureFilePath: $(diceAccountsFile.secureFilePath)
        
    - task: PowerShell@2
      inputs:
        targetType: 'inline'
        script: |
          $csprojPath = Get-ChildItem -Path "$(Build.SourcesDirectory)" -Filter "*.csproj" -Recurse | Select-Object -First 1 -ExpandProperty FullName
          [xml]$csproj = Get-Content -Path $csprojPath
          $ns = @{ "msbuild" = "http://schemas.microsoft.com/developer/msbuild/2003" }
          $versionNode = $csproj.SelectSingleNode("//msbuild:Project/msbuild:PropertyGroup/msbuild:Version", $ns)
          if ($versionNode -eq $null) {
            $propertyGroup = $csproj.CreateElement("PropertyGroup", $csproj.DocumentElement.NamespaceURI)
            $versionNode = $csproj.CreateElement("Version", $csproj.DocumentElement.NamespaceURI)
            $versionNode.InnerText = "$(Build.BuildNumber)"
            $propertyGroup.AppendChild($versionNode)
            $csproj.DocumentElement.InsertAfter($propertyGroup, $csproj.DocumentElement.LastChild)
          } else {
            $versionNode.InnerText = "$(Build.BuildNumber)"
          }
          $csproj.Save($csprojPath)


    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '$(solution)'

    - task: VSBuild@1
      inputs:
        solution: '$(solution)'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'



- stage: Test
  dependsOn: Build
  jobs:
  - job: TestJob
    steps:
    - task: VSTest@2
      inputs:
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'

- stage: Publish
  dependsOn: Test
  condition: and(succeeded(), eq(dependencies.Test.result, 'Succeeded'))
  jobs:
  - job: PublishJob
    steps:

    - task: DotNetCoreCLI@2
      inputs:
        command: 'push'
        packagesToPush: '**/bin/Release/*.nupkg' # Update this to the path of your .nupkg file
        nuGetFeedType: 'external'
        publishVstsFeed: 'https://api.nuget.org/v3/index.json'
        apiKey: '$(NuGetApiKey)'
    
